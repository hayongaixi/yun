name: macOS VNC Server (Final Fix)

on:
  workflow_dispatch:

jobs:
  macos-vnc:
    runs-on: macos-latest
    timeout-minutes: 3600

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Dependencies with Path Validation
        run: |
          # 安装XQuartz（X11服务器）
          brew install --cask xquartz
          
          # 强制安装并验证TigerVNC
          brew install tiger-vnc || brew reinstall tiger-vnc
          
          # 关键：同时添加Intel和Apple Silicon的Homebrew路径（避免架构判断错误）
          export PATH="/usr/local/bin:/opt/homebrew/bin:$PATH"
          echo "当前PATH: $PATH"
          
          # 验证VNC命令是否存在（若不存在则直接报错终止）
          if ! command -v vncserver &> /dev/null; then
            echo "错误：未找到vncserver，请检查TigerVNC安装"
            exit 1
          fi
          if ! command -v vncpasswd &> /dev/null; then
            echo "错误：未找到vncpasswd，请检查TigerVNC安装"
            exit 1
          fi
          echo "vncserver路径: $(which vncserver)"
          echo "vncpasswd路径: $(which vncpasswd)"
          
          # 启动XQuartz并等待初始化
          open -a XQuartz
          sleep 8  # 更长等待时间，确保X11服务就绪

      - name: Configure VNC Server
        run: |
          # 强制加载完整PATH
          export PATH="/usr/local/bin:/opt/homebrew/bin:$PATH"
          export LC_ALL=C
          export DISPLAY=:0  # 绑定X11显示端口
          
          # 生成随机VNC密码
          VNC_PASS=$(openssl rand -hex 8)
          echo "VNC_PASSWORD=$VNC_PASS" >> "$GITHUB_ENV"
          
          # 配置VNC目录
          mkdir -p ~/.vnc
          
          # 修复：直接使用vncpasswd命令（依赖前面的PATH配置）
          # 明确指定从标准输入读取密码（兼容TigerVNC语法）
          echo "$VNC_PASS" | vncpasswd -f > ~/.vnc/passwd
          chmod 600 ~/.vnc/passwd  # 严格权限，避免VNC报错
          
          # 配置VNC启动脚本（确保可执行）
          cat > ~/.vnc/xstartup << 'EOF'
          #!/bin/bash
          export DISPLAY=:0
          # 启动窗口管理器（若Openbox未安装则自动 fallback）
          if command -v openbox &> /dev/null; then
            openbox &
          else
            twm &  # X11默认窗口管理器
          fi
          # 启动终端
          xterm -ls -geometry 80x24+10+10 &
          EOF
          chmod +x ~/.vnc/xstartup
          
          # 停止残留进程，启动VNC服务器
          vncserver -kill :0 || true
          # 显式指定监听所有接口，避免本地绑定
          vncserver :0 -localhost no -geometry 1280x800 -depth 24

      - name: Install Tailscale
        run: |
          brew install tailscale
          sudo tailscale up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=gh-macos-runner-${GITHUB_RUN_ID}
          TAILSCALE_IP=$(tailscale ip -4)
          echo "TAILSCALE_IP=$TAILSCALE_IP" >> "$GITHUB_ENV"

      - name: Verify VNC Service
        run: |
          export PATH="/usr/local/bin:/opt/homebrew/bin:$PATH"
          echo "VNC服务器进程: $(ps aux | grep vncserver | grep -v grep)"
          echo "检查5900端口监听: $(netstat -an | grep 5900)"
          nc -z -v "$TAILSCALE_IP" 5900 || echo "端口检查警告 - 可能需要等待VNC完全启动"

      - name: Keep Connection Alive
        run: |
          echo "=== VNC访问信息 ==="
          echo "地址: vnc://${TAILSCALE_IP}:5900"
          echo "用户名: runner"
          echo "密码: ${VNC_PASSWORD}"
          echo "桌面环境: Openbox 或 twm（默认）"
          echo "==================="
          while true; do
            echo "[$(date)] VNC运行中 - 终止工作流以关闭"
            sleep 300
          done
